plot(f[1:length(f)/2],mag[1:length(f)/2],type=”l”)
plot(f[1:length(f)/2],mag[1:length(f)/2],type="l")
#CREATE OUR TIME SERIES DATA
y <- [0.0198, 0.0373, 0.0, 0.0198, 0.0058, 0.1263, 0.005, 0.005, 0.0829, 0.005, 0.0373, 0.0946, 0.0198, 0.0198, 0.005, 0.0242, 0.0946, 0.0371, 0.1263, 0.0198, 0.0371, 0.0959, 0.0, 0.0516, 0.0829, 0.0371, 0.0036, 0.005, 0.005, 0.0946, 0.0946, 0.0, 0.0959, 0.0, 0.0242, 0.0198, 0.1263, 0.005, 0.0959, 0.0057, 0.1263, 0.005, 0.0057, 0.0959, 0.0058, 0.0371, 0.0829, 0.1263, 0.0198, 0.0242, 0.0, 0.0371, 0.0, 0.0761, 0.0, 0.0761, 0.0373, 0.0058, 0.0058, 0.0959, 0.005, 0.0548, 0.0829, 0.0, 0.0371, 0.005, 0.0057, 0.0829, 0.0373, 0.0036, 0.0959, 0.0516, 0.0, 0.0373, 0.0823, 0.0371, 0.0058, 0.1263, 0.005, 0.0959, 0.0, 0.0, 0.0373, 0.0829, 0.0371, 0.0829, 0.0057, 0.0941, 0.1263, 0.0058, 0.0829, 0.0946, 0.0946, 0.0946, 0.0058, 0.0959, 0.0, 0.0058, 0.0829, 0.0036, 0.0036, 0.0516, 0.0036, 0.0941, 0.0516, 0.0959, 0.0829, 0.0959, 0.0371, 0.0516, 0.0829, 0.0829, 0.0548, 0.0516, 0.0057, 0.0373, 0.0, 0.0371, 0.0959, 0.0941, 0.005, 0.0761, 0.0516, 0.0371, 0.0, 0.005, 0.0198, 0.0371, 0.0941, 0.005, 0.0198, 0.005, 0.0761, 0.0371, 0.0373, 0.0, 0.0, 0.0946, 0.0, 0.0198, 0.0823, 0.0829, 0.0373, 0.0371, 0.0829]
#CREATE OUR TIME SERIES DATA
y <- c(0.0198, 0.0373, 0.0, 0.0198, 0.0058, 0.1263, 0.005, 0.005, 0.0829, 0.005, 0.0373, 0.0946, 0.0198, 0.0198, 0.005, 0.0242, 0.0946, 0.0371, 0.1263, 0.0198, 0.0371, 0.0959, 0.0, 0.0516, 0.0829, 0.0371, 0.0036, 0.005, 0.005, 0.0946, 0.0946, 0.0, 0.0959, 0.0, 0.0242, 0.0198, 0.1263, 0.005, 0.0959, 0.0057, 0.1263, 0.005, 0.0057, 0.0959, 0.0058, 0.0371, 0.0829, 0.1263, 0.0198, 0.0242, 0.0, 0.0371, 0.0, 0.0761, 0.0, 0.0761, 0.0373, 0.0058, 0.0058, 0.0959, 0.005, 0.0548, 0.0829, 0.0, 0.0371, 0.005, 0.0057, 0.0829, 0.0373, 0.0036, 0.0959, 0.0516, 0.0, 0.0373, 0.0823, 0.0371, 0.0058, 0.1263, 0.005, 0.0959, 0.0, 0.0, 0.0373, 0.0829, 0.0371, 0.0829, 0.0057, 0.0941, 0.1263, 0.0058, 0.0829, 0.0946, 0.0946, 0.0946, 0.0058, 0.0959, 0.0, 0.0058, 0.0829, 0.0036, 0.0036, 0.0516, 0.0036, 0.0941, 0.0516, 0.0959, 0.0829, 0.0959, 0.0371, 0.0516, 0.0829, 0.0829, 0.0548, 0.0516, 0.0057, 0.0373, 0.0, 0.0371, 0.0959, 0.0941, 0.005, 0.0761, 0.0516, 0.0371, 0.0, 0.005, 0.0198, 0.0371, 0.0941, 0.005, 0.0198, 0.005, 0.0761, 0.0371, 0.0373, 0.0, 0.0, 0.0946, 0.0, 0.0198, 0.0823, 0.0829, 0.0373, 0.0371, 0.0829)
#CREATE OUR FREQUENCY ARRAY
f <- 1:length(t)/T
#Domain setup
T <- 1
dt <- 0.01 #s
n <- T/dt
F <-1/dt
df <- 1/T
freq<-5 #Hz
t <- seq(0,T,by=dt) #also try ts function
#CREATE OUR TIME SERIES DATA
y <- c(0.0198, 0.0373, 0.0, 0.0198, 0.0058, 0.1263, 0.005, 0.005, 0.0829, 0.005, 0.0373, 0.0946, 0.0198, 0.0198, 0.005, 0.0242, 0.0946, 0.0371, 0.1263, 0.0198, 0.0371, 0.0959, 0.0, 0.0516, 0.0829, 0.0371, 0.0036, 0.005, 0.005, 0.0946, 0.0946, 0.0, 0.0959, 0.0, 0.0242, 0.0198, 0.1263, 0.005, 0.0959, 0.0057, 0.1263, 0.005, 0.0057, 0.0959, 0.0058, 0.0371, 0.0829, 0.1263, 0.0198, 0.0242, 0.0, 0.0371, 0.0, 0.0761, 0.0, 0.0761, 0.0373, 0.0058, 0.0058, 0.0959, 0.005, 0.0548, 0.0829, 0.0, 0.0371, 0.005, 0.0057, 0.0829, 0.0373, 0.0036, 0.0959, 0.0516, 0.0, 0.0373, 0.0823, 0.0371, 0.0058, 0.1263, 0.005, 0.0959, 0.0, 0.0, 0.0373, 0.0829, 0.0371, 0.0829, 0.0057, 0.0941, 0.1263, 0.0058, 0.0829, 0.0946, 0.0946, 0.0946, 0.0058, 0.0959, 0.0, 0.0058, 0.0829, 0.0036, 0.0036, 0.0516, 0.0036, 0.0941, 0.0516, 0.0959, 0.0829, 0.0959, 0.0371, 0.0516, 0.0829, 0.0829, 0.0548, 0.0516, 0.0057, 0.0373, 0.0, 0.0371, 0.0959, 0.0941, 0.005, 0.0761, 0.0516, 0.0371, 0.0, 0.005, 0.0198, 0.0371, 0.0941, 0.005, 0.0198, 0.005, 0.0761, 0.0371, 0.0373, 0.0, 0.0, 0.0946, 0.0, 0.0198, 0.0823, 0.0829, 0.0373, 0.0371, 0.0829)
#CREATE OUR FREQUENCY ARRAY
f <- 1:length(t)/T
#FOURIER TRANSFORM WORK
Y <- fft(y)
mag <- sqrt(Re(Y)^2+Im(Y)^2)*2/n
phase <- atan(Im(Y)/Re(Y))
Yr <- Re(Y)
Yi <- Im(Y)
#PLOTTING
layout(matrix(c(1,2), 2, 1, byrow = TRUE))
plot(t,y,type="l",xlim=c(0,T))
#PLOTTING
layout(matrix(c(1,2), 2, 1, byrow = TRUE))
plot(t,y,type="l",xlim=c(0,T))
freq<-1 #Hz
t <- seq(0,T,by=dt) #also try ts function
require(stats)
#Domain setup
T <- 1
dt <- 0.01 #s
n <- T/dt
F <-1/dt
df <- 1/T
freq<-1 #Hz
t <- seq(0,T,by=dt) #also try ts function
#CREATE OUR TIME SERIES DATA
y <- c(0.0198, 0.0373, 0.0, 0.0198, 0.0058, 0.1263, 0.005, 0.005, 0.0829, 0.005, 0.0373, 0.0946, 0.0198, 0.0198, 0.005, 0.0242, 0.0946, 0.0371, 0.1263, 0.0198, 0.0371, 0.0959, 0.0, 0.0516, 0.0829, 0.0371, 0.0036, 0.005, 0.005, 0.0946, 0.0946, 0.0, 0.0959, 0.0, 0.0242, 0.0198, 0.1263, 0.005, 0.0959, 0.0057, 0.1263, 0.005, 0.0057, 0.0959, 0.0058, 0.0371, 0.0829, 0.1263, 0.0198, 0.0242, 0.0, 0.0371, 0.0, 0.0761, 0.0, 0.0761, 0.0373, 0.0058, 0.0058, 0.0959, 0.005, 0.0548, 0.0829, 0.0, 0.0371, 0.005, 0.0057, 0.0829, 0.0373, 0.0036, 0.0959, 0.0516, 0.0, 0.0373, 0.0823, 0.0371, 0.0058, 0.1263, 0.005, 0.0959, 0.0, 0.0, 0.0373, 0.0829, 0.0371, 0.0829, 0.0057, 0.0941, 0.1263, 0.0058, 0.0829, 0.0946, 0.0946, 0.0946, 0.0058, 0.0959, 0.0, 0.0058, 0.0829, 0.0036, 0.0036, 0.0516, 0.0036, 0.0941, 0.0516, 0.0959, 0.0829, 0.0959, 0.0371, 0.0516, 0.0829, 0.0829, 0.0548, 0.0516, 0.0057, 0.0373, 0.0, 0.0371, 0.0959, 0.0941, 0.005, 0.0761, 0.0516, 0.0371, 0.0, 0.005, 0.0198, 0.0371, 0.0941, 0.005, 0.0198, 0.005, 0.0761, 0.0371, 0.0373, 0.0, 0.0, 0.0946, 0.0, 0.0198, 0.0823, 0.0829, 0.0373, 0.0371, 0.0829)
#CREATE OUR FREQUENCY ARRAY
f <- 1:length(t)/T
#FOURIER TRANSFORM WORK
Y <- fft(y)
dt <- 1 #s
n <- T/dt
F <-1/dt
df <- 1/T
freq<-1 #Hz
t <- seq(0,T,by=dt) #also try ts function
#Domain setup
T <- 145
dt <- 1 #s
n <- T/dt
F <-1/dt
df <- 1/T
freq<-1 #Hz
t <- seq(0,T,by=dt) #also try ts function
#CREATE OUR TIME SERIES DATA
y <- c(0.0198, 0.0373, 0.0, 0.0198, 0.0058, 0.1263, 0.005, 0.005, 0.0829, 0.005, 0.0373, 0.0946, 0.0198, 0.0198, 0.005, 0.0242, 0.0946, 0.0371, 0.1263, 0.0198, 0.0371, 0.0959, 0.0, 0.0516, 0.0829, 0.0371, 0.0036, 0.005, 0.005, 0.0946, 0.0946, 0.0, 0.0959, 0.0, 0.0242, 0.0198, 0.1263, 0.005, 0.0959, 0.0057, 0.1263, 0.005, 0.0057, 0.0959, 0.0058, 0.0371, 0.0829, 0.1263, 0.0198, 0.0242, 0.0, 0.0371, 0.0, 0.0761, 0.0, 0.0761, 0.0373, 0.0058, 0.0058, 0.0959, 0.005, 0.0548, 0.0829, 0.0, 0.0371, 0.005, 0.0057, 0.0829, 0.0373, 0.0036, 0.0959, 0.0516, 0.0, 0.0373, 0.0823, 0.0371, 0.0058, 0.1263, 0.005, 0.0959, 0.0, 0.0, 0.0373, 0.0829, 0.0371, 0.0829, 0.0057, 0.0941, 0.1263, 0.0058, 0.0829, 0.0946, 0.0946, 0.0946, 0.0058, 0.0959, 0.0, 0.0058, 0.0829, 0.0036, 0.0036, 0.0516, 0.0036, 0.0941, 0.0516, 0.0959, 0.0829, 0.0959, 0.0371, 0.0516, 0.0829, 0.0829, 0.0548, 0.0516, 0.0057, 0.0373, 0.0, 0.0371, 0.0959, 0.0941, 0.005, 0.0761, 0.0516, 0.0371, 0.0, 0.005, 0.0198, 0.0371, 0.0941, 0.005, 0.0198, 0.005, 0.0761, 0.0371, 0.0373, 0.0, 0.0, 0.0946, 0.0, 0.0198, 0.0823, 0.0829, 0.0373, 0.0371, 0.0829)
#CREATE OUR FREQUENCY ARRAY
f <- 1:length(t)/T
#FOURIER TRANSFORM WORK
Y <- fft(y)
mag <- sqrt(Re(Y)^2+Im(Y)^2)*2/n
phase <- atan(Im(Y)/Re(Y))
Yr <- Re(Y)
Yi <- Im(Y)
#PLOTTING
layout(matrix(c(1,2), 2, 1, byrow = TRUE))
plot(t,y,type="l",xlim=c(0,T))
mag
teste <- seq(1,10)
mean(teste)
median(teste)
sum(teste)
sd(teste)
var(teste)
teste2 <- 2*(teste)
mean(teste2)
median(teste2)
sd(teste2)
var(teste2)
662.5/12/5
662.5/12.5
install.packages("BiocManager")
BiocManager::install("rSweep")
BiocManager::install("rSweeP")
BiocManager::install("rSWeeP")
library('rSWeeP')
ncRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/ncRNA.fasta'
library('rSWeeP')
mRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/mRNA.fasta'
ncRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/ncRNA.fasta'
?SWeePlite
sw <- SWeePlite(input = mRNA_seqs, psz = 1000, mask = (4), seqtype = 'NT')
seqs_path <- '/home/matheus/Downloads/apagar/FEELnc/seqs'
sw <- SWeePlite(input = seqs_path, psz = 1000, mask = (4), seqtype = 'NT')
sw$info
sw$proj
teste <- sw$proj
View(teste)
?`rSWeeP-package`
teste <- extractHDV(input = seqs_path, psz = 1000, mask = (4), seqtype = 'NT')
teste <- orthBase(col=1000, seqtype = 'NT', mask = (4))
View(teste)
sw <- SWeeP(input = seqs_path, psz = 1000, mask = (4), seqtype = 'NT')
orthbase <- orthBase(col=1000, seqtype = 'NT', mask = (4))
sw <- SWeeP(input = seqs_path, orthbase = orthbase, mask = (4), seqtype = 'NT')
View(sw)
? SWeePlite
sw <- SWeePlite(input = seqs_path, psz = 1000, mask = (4), seqtype = 'NT', concatenate = FALSE)
library('Biostrings')
Biostrings::BStringSet(mRNA_seqs)
teste <- Biostrings::BStringSet(mRNA_seqs)
View(teste)
teste
sw <- SWeePlite(input = teste, psz = 1000, mask = (4), seqtype = 'NT', concatenate = FALSE)
Biostrings::DNAStringSet(mRNA_seqs)
teste <- Biostrings::readBStringSet(mRNA_seqs)
mRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/seqs/mRNA.fasta'
ncRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/seqs/ncRNA.fasta'
teste <- Biostrings::readBStringSet(mRNA_seqs)
sw <- SWeePlite(input = teste, psz = 1000, mask = (4), seqtype = 'NT', concatenate = FALSE)
teste <- sw$proj
View(teste)
ncRNA <- Biostrings::readBStringSet(ncRNA_seqs)
sw_nc <- SWeePlite(input = ncRNA, psz = 1000, mask = (4), seqtype = 'NT', concatenate = FALSE, ncores = 8)
write.csv2('/home/matheus/Downloads/apagar/FEELnc/seqs/mRNA.csv')
? write.csv2
write.csv2(sw$proj, file = '/home/matheus/Downloads/apagar/FEELnc/seqs/mRNA.csv', sep = ';')
? write.csv
library('rSWeeP')
library('Biostrings')
mRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/seqs/mRNA.fasta'
ncRNA_seqs <- '/home/matheus/Downloads/apagar/FEELnc/seqs/ncRNA.fasta'
mRNA <- Biostrings::readBStringSet(mRNA_seqs)
ncRNA <- Biostrings::readBStringSet(ncRNA_seqs)
sw_mrna <- SWeePlite(input = mRNA, psz = 1000, mask = c(5,5,5), seqtype = 'NT', concatenate = FALSE, ncores = 8)
sw_ncrna <- SWeePlite(input = ncRNA, psz = 1000, mask = (5,5,5), seqtype = 'NT', concatenate = FALSE, ncores = 8)
sw_ncrna <- SWeePlite(input = ncRNA, psz = 1000, mask = c(5,5,5), seqtype = 'NT', concatenate = FALSE, ncores = 8)
write.csv(sw_mrna$proj, file = '/home/matheus/Downloads/apagar/FEELnc/seqs/mRNA.csv', sep = ';')
write.csv(sw_ncrna$proj, file = '/home/matheus/Downloads/apagar/FEELnc/seqs/ncRNA.csv', sep = ';')
setwd("~/Documents/doc_tatiana/Git-Quali/")
## ---------------------------
options(scipen = 6, digits = 4) # For non-scientific notation
## ---------------------------
## load up the packages we will need:  (uncomment as required)
library("Biostrings") #Sequências
library("seqinr") # Sequências
library("igraph") # Grafo
library("dplyr") # Manipulação de dados
library("pbmcapply") # Paralelização (com progress bar)
## ---------------------------
## load up our functions into memory
source("createNet.R")
source("createAdjMatrix.R")
source("generateCombinations.R")
## ---------------------------
# Parametros
n_cores <- detectCores() - 1  # leave one core free
seq_name <- "HIV_6964.fasta" # arquivo .fasta com as sequências
seq <- readBStringSet(seq_name) # Leitura de sequências
seq_names <- names(seq) # Nome das sequências
lengths <- width(seq) # Tamanho das sequências
# Criar dataframe com informações das sequências
true_labels_hiv <- data.frame(name = seq_names, length = lengths, subtype = NA) # Completar a coluna com subtipo?
#write.csv(df, "HIV_6946dframe.csv", row.names = FALSE)
# Caso já tenha o arquivo pronto
true_labels_hiv <- read.csv("HIV_6946annota.csv", header = TRUE, sep = ";") # arquivo com informações das seq. - name, subtype, length
word <- 3
step <- 1
vertices_ordem <- c("AAA", "AAC", "AAG", "AAT", "ACA", "ACC", "ACG", "ACT", "AGA", "AGC", "AGG", "AGT", "ATA", "ATC", "ATG", "ATT",
"CAA", "CAC", "CAG", "CAT", "CCA", "CCC", "CCG", "CCT", "CGA", "CGC", "CGG", "CGT", "CTA", "CTC", "CTG", "CTT",
"GAA", "GAC", "GAG", "GAT", "GCA", "GCC", "GCG", "GCT", "GGA", "GGC", "GGG", "GGT", "GTA", "GTC", "GTG", "GTT",
"TAA", "TAC", "TAG", "TAT", "TCA", "TCC", "TCG", "TCT", "TGA", "TGC", "TGG", "TGT", "TTA", "TTC", "TTG", "TTT")
# Transformar sequências em matrizes de adjacência
char_seqs <- as.character(seq)
splitted_seq <- strsplit(char_seqs, split = "", fixed = TRUE)
adj_matrices <- pbmclapply(seq_along(splitted_seq), function(i) {
# sequence <- strsplit(toString(seq[i]), split = '', fixed = TRUE)[[1]]
createAdjMatrix(word, step, splitted_seq[[i]], vertices_ordem)
}, mc.cores = n_cores)
# Adicionar nome as matrizes de adjacência
name_adj_matrices <- setNames(adj_matrices, true_labels_hiv$name)
# Transformar matrizes de adjacência em vetores
vectorized_matrices <- lapply(adj_matrices, function(x) as.vector(t(x)))
library("dendextend") # Dendrogramas
library("stats") # Explícito para dist
## ---------------------------
##### Gerando matriz de distância
data_matrix <- do.call(rbind, vectorized_matrices)
dist_matriz_euclidean <- as.matrix(dist(data_matrix,
method = "euclidean"))
##### Gerando dendrograma
hc_euclidean <- hclust(as.dist(dist_matriz_euclidean),
method = "ward.D2")
dend_euc <- as.dendrogram(hc_euclidean)
leaf_order_euc <- order.dendrogram(dend_euc)
species_ordered_euc <- true_labels_hiv$subtype[leaf_order_euc]
unique_subtypes <- unique(true_labels_hiv$subtype)
colors <- rainbow(length(unique_subtypes))  # Gera 8 cores diferentes
species_colors_euc <- colors[as.numeric(factor(species_ordered_euc,
levels = unique_subtypes))]
dend_euc <- dend_euc %>% set("labels_colors",
species_colors_euc)
plot(dend_euc)
legend("topright", legend = unique_subtypes,
col = colors,
pch = 15,
title = "Subtipos")
View(dend_euc)
dend_euc
dend_euc[[1]]
class(dend_euc)
type(dend_euc)
# Example dataset
set.seed(123)
data <- rbind(
matrix(rnorm(50), ncol=2),
matrix(rnorm(50, mean=3), ncol=2)
)
labels <- c(rep("A", 25), rep("B", 25))
hc <- hclust(dist(data))
View(data)
View(hc)
# Run the algorithm
clusters <- cut_dendrogram(hc, labels, hom_thresh = 0.9, min_size = 10)
cut_dendrogram <- function(hc, labels, hom_thresh = 0.9, min_size = 10) {
dend <- as.dendrogram(hc)
cluster_assignments <- rep(NA, length(labels))
cluster_id <- 1
dfs <- function(node, indices) {
if (is.leaf(node)) {
return()
}
# Get all leaves under this node
leaf_indices <- sort(get_leaves_attr(node, "label"))  # leaf labels
leaf_indices <- as.numeric(leaf_indices)
# Subset of class labels under this node
sub_labels <- labels[leaf_indices]
n <- length(sub_labels)
# Compute homogeneity
freq_table <- table(sub_labels)
max_class <- names(freq_table)[which.max(freq_table)]
homogeneity <- max(freq_table) / n
# Check criteria
if (homogeneity >= hom_thresh && n >= min_size) {
cluster_assignments[leaf_indices] <<- cluster_id
cluster_id <<- cluster_id + 1
} else {
# Recurse on children
dfs(node[[1]], indices)
dfs(node[[2]], indices)
}
}
dfs(dend, 1:length(labels))
return(cluster_assignments)
}
# Run the algorithm
clusters <- cut_dendrogram(hc, labels, hom_thresh = 0.9, min_size = 10)
table(clusters)
View(true_labels_hiv)
labels<-true_labels_hiv$subtype
clusters_hiv <- cut_dendrogram(dend_euc, labels, hom_thresh = 0.9, min_size = 10)
table(clusters_hiv)
# Plot the dendrogram with clusters
plot(dend_euc, main = "Dendrogram with Clusters", xlab = "Samples", ylab = "Height")
# Add colored rectangles to indicate clusters
rect.dendrogram(dend_euc, k = max(clusters_hiv), border = "red")
assign_subclusters <- function(hc, class_labels) {
dend <- as.dendrogram(hc)
n_samples <- length(class_labels)
cluster_assignments <- rep(NA, n_samples)
cluster_id <- 1
# Recursive DFS function
dfs <- function(node) {
# Get the indices (leaf labels) under this node
labels <- sort(as.numeric(labels(node)))
node_labels <- class_labels[labels]
# Homogeneity check
freq_table <- table(node_labels)
max_prop <- max(freq_table) / sum(freq_table)
homogeneous <- max_prop > 0.9
# Density check
dense <- length(labels) > 10
if (homogeneous && dense) {
# Assign a new cluster to these indices
cluster_assignments[labels] <<- paste0("cluster_", cluster_id, "_", names(which.max(freq_table)))
cluster_id <<- cluster_id + 1
} else if (!is.leaf(node)) {
dfs(node[[1]])
dfs(node[[2]])
}
}
dfs(dend)
return(cluster_assignments)
}
clusters <- assign_subclusters(hc, labels)
table(clusters, labels)
labels <- c(rep("A", 25), rep("B", 25))
clusters <- assign_subclusters(hc, labels)
table(clusters, labels)
labels_hiv <- true_labels_hiv$subtype
clusters_hiv <- assign_subclusters(dend_euc, labels_hiv)
table(clusters_hiv, labels_hiv)
plot_colored_dendrogram <- function(hc, clusters) {
# Convert hclust to dendrogram
dend <- as.dendrogram(hc)
# Prepare a named vector of cluster assignments (must be character or factor)
cluster_labels <- clusters
names(cluster_labels) <- as.character(1:length(cluster_labels))
# Assign colors to clusters
unique_clusters <- na.omit(unique(cluster_labels))
cluster_colors <- setNames(rainbow(length(unique_clusters)), unique_clusters)
# Assign colors to branches based on cluster assignment
colored_dend <- dendrapply(dend, function(node) {
if (is.leaf(node)) {
label <- attr(node, "label")
cluster <- cluster_labels[label]
if (!is.na(cluster)) {
attr(node, "edgePar") <- c(attr(node, "edgePar"), list(col = cluster_colors[cluster], lwd = 2))
}
}
return(node)
})
# Plot the dendrogram
plot(colored_dend, main = "Dendrogram with Subcluster Coloring", ylab = "Height")
legend("topright", legend = unique_clusters, col = cluster_colors, lty = 1, lwd = 2, cex = 0.8)
}
# Example usage
plot_colored_dendrogram(hc, clusters)
# Example usage
plot_colored_dendrogram(dend_euc, clusters_hiv)
plot_pretty_dendrogram(dend_euc, clusters_hiv, show_labels = FALSE, legend_cols = 5)
plot_pretty_dendrogram <- function(hc, clusters, show_labels = FALSE, legend_cols = 4) {
# Convert hclust to dendrogram
dend <- as.dendrogram(hc)
# Unique clusters and colors
cluster_labels <- clusters
names(cluster_labels) <- as.character(1:length(cluster_labels))
unique_clusters <- na.omit(unique(cluster_labels))
# Generate distinct colors
cluster_palette <- setNames(rainbow(length(unique_clusters)), unique_clusters)
# Assign colored branches to subclusters
color_branch_by_cluster <- function(node) {
labels_under <- sort(as.numeric(labels(node)))
node_clusters <- unique(cluster_labels[labels_under])
# If all non-NA labels belong to the same cluster, color this subtree
if (length(na.omit(node_clusters)) == 1 && !is.na(node_clusters[1])) {
cluster <- node_clusters[1]
node <- set(node, "edgePar", list(col = cluster_palette[cluster], lwd = 2))
} else if (!is.leaf(node)) {
node[[1]] <- color_branch_by_cluster(node[[1]])
node[[2]] <- color_branch_by_cluster(node[[2]])
}
return(node)
}
colored_dend <- color_branch_by_cluster(dend)
# Set labels (optional)
if (!show_labels) {
colored_dend <- set(colored_dend, "labels", rep("", length(labels(colored_dend))))
}
# Plot setup
op <- par(no.readonly = TRUE)
par(mar = c(5, 4, 4, 2) + 0.1)  # more space
plot(colored_dend, main = "Dendrogram with Subcluster Coloring", ylab = "Height", axes = FALSE)
axis(2)  # y-axis only
# Legend (multi-column layout)
legend("topright", inset = c(-0.05, 0),
legend = unique_clusters,
col = cluster_palette[unique_clusters],
lty = 1, lwd = 2, cex = 0.5,
ncol = legend_cols, xpd = TRUE, bty = "n")
par(op)
}
plot_pretty_dendrogram(dend_euc, clusters_hiv, show_labels = FALSE, legend_cols = 5)
library(dendextend)
plot_pretty_dendrogram <- function(hc, clusters, show_labels = FALSE, legend_cols = 4) {
# Convert hclust to dendrogram
dend <- as.dendrogram(hc)
# Unique clusters and colors
cluster_labels <- clusters
names(cluster_labels) <- as.character(1:length(cluster_labels))
unique_clusters <- na.omit(unique(cluster_labels))
# Generate distinct colors
cluster_palette <- setNames(rainbow(length(unique_clusters)), unique_clusters)
# Assign colored branches to subclusters
color_branch_by_cluster <- function(node) {
labels_under <- sort(as.numeric(labels(node)))
node_clusters <- unique(cluster_labels[labels_under])
# If all non-NA labels belong to the same cluster, color this subtree
if (length(na.omit(node_clusters)) == 1 && !is.na(node_clusters[1])) {
cluster <- node_clusters[1]
node <- set(node, "edgePar", list(col = cluster_palette[cluster], lwd = 2))
} else if (!is.leaf(node)) {
node[[1]] <- color_branch_by_cluster(node[[1]])
node[[2]] <- color_branch_by_cluster(node[[2]])
}
return(node)
}
colored_dend <- color_branch_by_cluster(dend)
# Set labels (optional)
if (!show_labels) {
colored_dend <- set(colored_dend, "labels", rep("", length(labels(colored_dend))))
}
# Plot setup
op <- par(no.readonly = TRUE)
par(mar = c(5, 4, 4, 2) + 0.1)  # more space
plot(colored_dend, main = "Dendrogram with Subcluster Coloring", ylab = "Height", axes = FALSE)
axis(2)  # y-axis only
# Legend (multi-column layout)
legend("topright", inset = c(-0.05, 0),
legend = unique_clusters,
col = cluster_palette[unique_clusters],
lty = 1, lwd = 2, cex = 0.5,
ncol = legend_cols, xpd = TRUE, bty = "n")
par(op)
}
plot_pretty_dendrogram(dend_euc, clusters_hiv, show_labels = FALSE, legend_cols = 5)
plot_pretty_dendrogram <- function(hc, clusters, show_labels = FALSE, legend_cols = 4) {
dend <- as.dendrogram(hc)
# Assign cluster names to leaf labels
cluster_labels <- clusters
names(cluster_labels) <- as.character(1:length(cluster_labels))
unique_clusters <- na.omit(unique(cluster_labels))
# Assign colors
cluster_palette <- setNames(rainbow(length(unique_clusters)), unique_clusters)
# Color entire subtrees if they belong to a single subcluster
color_branch_by_cluster <- function(node) {
node_labels <- sort(as.numeric(labels(node)))
node_clusters <- unique(cluster_labels[node_labels])
if (length(na.omit(node_clusters)) == 1 && !is.na(node_clusters[1])) {
cluster <- node_clusters[1]
attr(node, "edgePar") <- c(attr(node, "edgePar"), list(col = cluster_palette[cluster], lwd = 2))
} else if (!is.leaf(node)) {
node[[1]] <- color_branch_by_cluster(node[[1]])
node[[2]] <- color_branch_by_cluster(node[[2]])
}
return(node)
}
dend_colored <- color_branch_by_cluster(dend)
# Optionally hide labels
if (!show_labels) {
labels(dend_colored) <- rep("", length(labels(dend_colored)))
}
# Plotting
op <- par(no.readonly = TRUE)
par(mar = c(5, 4, 4, 10))  # extra right margin for legend
plot(dend_colored, main = "Dendrogram with Colored Subclusters", ylab = "Height", axes = FALSE)
axis(2)
# Legend
legend("topright", inset = c(-0.05, 0),
legend = unique_clusters,
col = cluster_palette[unique_clusters],
lty = 1, lwd = 2, cex = 0.5,
ncol = legend_cols, xpd = TRUE, bty = "n")
par(op)
}
plot_pretty_dendrogram(dend_euc, clusters_hiv, show_labels = FALSE, legend_cols = 5)
plot_dendrogram_by_class <- function(hc, clusters, legend_cols = 3, show_labels = FALSE) {
dend <- as.dendrogram(hc)
# Get class type from cluster name (e.g., "cluster_1_A" -> "A")
class_labels <- ifelse(is.na(clusters), NA, sub(".*_(\\w+)$", "\\1", clusters))
names(class_labels) <- as.character(1:length(class_labels))
unique_classes <- na.omit(unique(class_labels))
class_palette <- setNames(rainbow(length(unique_classes)), unique_classes)
# Apply class color to branches
color_branch_by_class <- function(node) {
node_labels <- sort(as.numeric(labels(node)))
node_classes <- unique(class_labels[node_labels])
if (length(na.omit(node_classes)) == 1 && !is.na(node_classes[1])) {
class_ <- node_classes[1]
attr(node, "edgePar") <- c(attr(node, "edgePar"), list(col = class_palette[class_], lwd = 2))
} else if (!is.leaf(node)) {
node[[1]] <- color_branch_by_class(node[[1]])
node[[2]] <- color_branch_by_class(node[[2]])
}
return(node)
}
dend_colored <- color_branch_by_class(dend)
# Optionally hide labels
if (!show_labels) {
labels(dend_colored) <- rep("", length(labels(dend_colored)))
}
# Plot
op <- par(no.readonly = TRUE)
par(mar = c(5, 4, 4, 8))  # right margin for legend
plot(dend_colored, main = "Dendrogram Colored by Class Type", ylab = "Height", axes = FALSE)
axis(2)
# Legend for class types
legend("topright", inset = c(-0.05, 0),
legend = unique_classes,
col = class_palette[unique_classes],
lty = 1, lwd = 2, cex = 0.6,
ncol = legend_cols, xpd = TRUE, bty = "n")
par(op)
}
plot_dendrogram_by_class(dend_euc, clusters_hiv, show_labels = FALSE, legend_cols = 5)
table(clusters_hiv, labels_hiv)
source("assign_subclusters.R")
labels_hiv <- true_labels_hiv$subtype
clusters_hiv <- assign_subclusters(dend_euc,
labels_hiv,
hom_thresh = 0.9,
min_size = 10)
table(clusters_hiv, labels_hiv)
